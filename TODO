Application UI:

    - Figure out how to organize the various windows

    - L10n/I18n
	- Show translated property names/descriptions
	- Make sure other UI stuff is translated
	- Make Grid and other custom widgets right-to-left-able


UI-Designing UI:

    - Fix up not-fully-functional wrappers:

	- Dialog
		- action_area is currently broken on glade import

	- Notebook has a few problems:
		- should the child properties appear as properties of
		  the page or the tab? or both? or should they have
		  different properties?
		- Switch with Prev/Next isn't implemented

	- Widget.Visible: glade treats this as a shadow property.
          Should we?

	- ... ?

    - Add wrappers for things that aren't wrapped yet

	- Layout/Fixed

	- Menubar, finish Toolbar (UIManager, Gtk.Action, etc)

	- Gnome widgets (the not-yet-deprecated ones anyway)
		- This might be just GnomeDruid in 2.6?
		- Not in a separate "Gnome widgets" group.
			- Though we need some way to do Windows/
			  cross-platform UIs (ie, gtk-only)
			- Also need to be able to target different
			  Gtk# versions 

	- Non-widgets:
		- TreeModel
		- SizeGroup
		- EntryCompletion
		- Stock items

	- AspectFrame, CellView, HandleBox, HRuler, IconView,
	  InputDialog, VRuler
		- (Glade does all these)

	- pop-up menus

    - Make widgets more HIGalicious

	- Dialog layout

    - More auto-layout functionality

	- Containers should try to automatically set Padding/Spacing
          and BorderWidth

	- Fix up Box autoexpand, add it to Table.

	- If you drag a non-expandable widget into a Bin, it could add
          a table

    - "Custom widgets" ?

	- It's better to be able to load the custom widget into stetic
          and add it directly.

	- But glade-style custom widgets could be nice for UI mockups,
          when you don't actually have any code for the widget, if you
          had certain functionality:
		- display a user-specified image rather than the stock
		  "custom widget" background
		- better control of sizing behavior


Misc functionality:

    - Load/Save
	- Get GtkBuilder format finalized...
	- File format should be stable against small changes so that
	  if multiple developers are working on the same stetic files,
	  they don't cause cvs/svn conflicts for each other. (IOW,
	  don't just write things out in hash-table order.)

    - Undo
	- Use the cut+paste code. Just serialize before/after state.

    - Code generation / MonoDevelop integration

    - Loading additional widget types

    - Be able to specify images as resources rather than files

    - Wiring things together
	- X is sensitive if Y is checked
	- X's Foo property contains the value of GConf key Y
	- Connect X's Foo method to Y's Bar signal

    - Signals (this is different from MD...)

    - Accelerators

    - Templates (build something and then save it in a way that you or
      other people can have it as a pre-built thing in your Palette)

    - Comments (stickynotes that appear in stetic, but not in the
      runtime UI).

    - A11y
	- Stetic-itself a11y
	- A11y of the designed UI

    - Alternate UI views. Change theme (especially to a11y themes) and
      language independently of the designer's theme/language, to test
      the designed UI's behavior.
