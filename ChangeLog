2005-01-20  Dan Winship  <danw@novell.com>

	* Move 90% of the files in the repository somewhere else.

	* libstetic/: classes needed by both Stetic itself and widget
	wrapper implementations

	* libstetic/editor/: moved from stetic/editor

	* widgets/: moved from stetic/wrapper and modified a bit to only
	require libstetic. (In particular, all the wrappers now have
	constructors that take an IStetic object which can be used to
	create new WidgetSites)

	* widgets/pixmaps: moved from pixmaps/

	* stetic/: now just the app itself, which links to libstetic and
	dynamically loads libsteticwidgets.
	
2005-01-20  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs (PropertyGroup): Make this take a
	varargs list of property names and build the PropertyDescriptors
	itself, to cut down on the amount of work the wrappers need to do.
	Also add an indexer to retrieve a PropertyDescriptor by name.
	(IPropertySensitizer): Gone

	* stetic/PropertyDescriptor.cs: Update the ctor for how
	PropertyGroup uses it now.
	(DependsOn, DependsInverselyOn, Dependencies,
	InverseDependencies): stuff to specify/probe inter-property
	dependencies, to replace the old IPropertySensitizer stuff more
	simply.

	* stetic/PropertyGrid.cs: Replace IPropertySensitizer stuff with
	PropertyDescriptor.Dependencies, etc

	* stetic/Palette.cs (AddWidgets): Catch exceptions from the
	Gdk.Pixbuf ctor and use the "broken image" image instead if it
	can't load the wrapper's specified image.

	* stetic/wrapper/*.cs: Update for new, simpler PropertyGroup
	creation and inter-property sensitivity settings.

	* stetic/wrapper/ColorButton.cs: 
	* stetic/wrapper/HScale.cs: 
	* stetic/wrapper/ProgressBar.cs: 
	* stetic/wrapper/Scale.cs: 
	* stetic/wrapper/Statusbar.cs: 
	* stetic/wrapper/VScale.cs: New wrappers

	* pixmaps/missing.png: "missing image" pixmap to use for now for
	widgets I don't have an icon for.

2005-01-14  Dan Winship  <danw@novell.com>

	* stetic/PropertyEditor.cs (BasicEditor.EditorValueChanged,
	BasicEditor.Update, RangeEditor.EditorValueChanged,
	RangeEditor.Update): Ignore EditorValueChanged if we're inside an
	Update, since it's just reflecting the change we're already
	making. Indirectly fixes a problem with deleting characters in an
	Entry.

	* stetic/wrapper/Arrow.cs: Add Misc.MiscProperties

	* stetic/wrapper/Button.cs: Implement IContextMenuProvider.
	(ContextMenuItems): Return a context menu with "Remove Button
	Contents" and "Restore Button Label" items, properly sensitized.
	(RemoveContents, RestoreLabel): Implement those.
	(InsensitiveProperties): Update to deal with RemoveContents

	* stetic/wrapper/CheckButton.cs: 
	* stetic/wrapper/RadioButton.cs: Add missing "Label" property plus
	Button.ButtonExtraProperties

	* stetic/editor/Enumeration.cs: Don't show the enumeration values
	in the menu.

	* stetic/editor/FloatRange.cs: Show 2 decimal digits

2005-01-14  Dan Winship  <danw@novell.com>

	* stetic/WidgetBox.cs: Remove InterceptEvents property and
	EventWindow. Instead, ConnectBefore to the child's
	ButtonPressEvent. (This should help to deal with
	non-container-like containers. Eg, GtkButton if you replace the
	label widget with something else.)
	(OnChildButtonPress): called when a button press is intercepted on
	the child widget

	* stetic/WidgetSite.cs: Update for WidgetBox changes.
	(OnChildButtonPress): Handle context menu or focus grabbing as
	needed
	(StartDrag): Change this to take an EventMotion arg. Return false
	if the event window isn't the WidgetBox's HandleWindow. (ie, don't
	allow drags from the widget itself any more, only from its
	handles).
	
	* stetic/WidgetFactory.cs (StartDrag): add evt arg

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/ContextMenu.cs (ContextMenuItem): add an "Enabled" field
	and a ctor to set it
	(ContextMenu): obey the "Enabled" field on IContextMenuProvider
	items
	(IContextMenuProvider): Turn ContextMenuItems from a property to a
	procedure, so we can pass the context item to it

	* stetic/wrapper/Notebook.cs: update for IContextMenuProvider
	change. Disable items (eg, "Go To Previous Page") as appropriate.

	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/VBox.cs:
	* stetic/wrapper/Table.cs: update for IContextMenuProvider change

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/WidgetSite.cs (EmptySize): new property to set the site's
	size when empty
	(set_Occupancy): Use that rather than hardcoding 10x10
	(WidgetSite): New ctor to set EmptySize

	* stetic/wrapper/Window.cs: Use the new WidgetSite ctor rather
	than overriding OnSizeRequested

	* stetic/wrapper/Dialog.cs: Use the new WidgetSite ctor

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/Stetic.cs: Rename the main class from "Stetic" to
	"SteticMain", to work around really annoying C# semantics

	* stetic/WidgetFactory.cs (WindowFactory.OnButtonPressEvent):
	update for that

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/WidgetFactory.cs (WidgetFactoryAttribute): gone, turned
	into WidgetWrapperAttribute
	(WidgetFactory, WindowFactory): Take a Type directly rather than a
	WidgetFactoryDelegate.

	* stetic/WidgetWrapperAttribute.cs: replaces
	WidgetFactoryAttribute, but basically the same thing

	* stetic/Palette.cs (AddWidgets): Take an Assembly rather than a
	Type, and search for all Types in that Assembly with a
	WidgetWrapperAttribute.

	* stetic/Stetic.cs (Main): Update call to Palette.AddWidgets

	* stetic/wrapper/DefaultWidgets.cs: Gone

	* stetic/wrapper/Dialog.cs: 
	* stetic/wrapper/Notebook.cs: 
	* stetic/wrapper/TextView.cs: 
	* stetic/wrapper/ToggleButton.cs: wrap these

	* stetic/wrapper/*.cs: add WidgetWrapper attributes, make sure
	every class has a no-arg constructor

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/ContextMenu.cs (IContextMenuProvider): New interface for
	widget wrappers that want to add items to their context menus.
	(ContextMenu): support IContextMenuProvider.

	* stetic/IObjectWrapper.cs (IPropertySensitizer): Make
	InsensitiveProperties a property rather than a method

	* stetic/PropertyDescriptor.cs (PropertyDescriptor): Add a new
	constructor for "proxy" descriptors, which get a ParamSpec from
	the base class, but use the property on the derived class. Also,
	if the passed-in propertyName is invalid, throw an
	ArgumentException with a useful message rather than causing a
	NullArgumentException later.

	* stetic/PropertyGrid.cs (SetupSensitivity): Update for
	InsensitiveProperties change

	* stetic/WidgetSite.cs: Update for ContextMenu ctor change

	* stetic/wrapper/Button.cs: Use a proxy PropertyDescriptor for
	"Label", update InsensitiveProperties.

	* stetic/wrapper/ComboBox.cs: Fix a crasher typo noted by Peter
	Williams.

	* stetic/wrapper/Icon.cs: Use proxy PropertyDescriptors for Stock
	and IconSize.

	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/VBox.cs: Implement IContextMenuProvider, adding
	"Insert Before" and "Insert After" commands.

	* stetic/wrapper/Table.cs: Implement IContextMenuProvider, adding
	"Insert Row/Column Before/After" and "Delete Row/Column". Use
	proxy PropertyDescriptors for NRows and NColumns since the base
	properties won't let you remove non-empty rows/columns. Update
	InsensitiveProperties.

	* stetic/stetic.in: If command-line args are passed, pass them to
	mono (since stetic doesn't take any arguments at the moment, and I
	use mono --trace a lot).

2005-01-12  Dan Winship  <danw@novell.com>

	* stetic/PropertyGrid.cs: Reorganize stuff so that ContainerChild
	classes can override properties and implement IPropertySensitizer
	as well.
	
	* stetic/IDesignTimeContainer.cs:
	* stetic/IObjectWrapper.cs (IContainerWrapper): Move the things
	that used to be in IDesignTimeContainer to IContainerWrapper. Kill
	IDesignTimeContainer.

	* stetic/WidgetSite.cs: Update for that

	* stetic/wrapper/Frame.cs:
	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/HButtonBox.cs:
	* stetic/wrapper/HPaned.cs:
	* stetic/wrapper/VBox.cs:
	* stetic/wrapper/VButtonBox.cs:
	* stetic/wrapper/VPaned.cs:
	* stetic/wrapper/Window.cs: Update

	* stetic/wrapper/Table.cs: Update.
	(TableChild) Subclass Gtk.Table.TableChild with an "AutoSize"
	property saying whether or not to automatically adjust the packing
	of child widgets (defaults to on). Also implement
	IPropertySensitizer.
	(Sync): Update for that.

2005-01-12  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs (IContainerWrapper): new interface a la
	IObjectWrapper, but including child properties as well.

	* stetic/PropertyGrid.cs (ChildPropertyGrid): Use IContainerWrapper

	* stetic/wrapper/Box.cs: 
	* stetic/wrapper/ButtonBox.cs: 
	* stetic/wrapper/Paned.cs: add static child PropertyGroups

	* stetic/wrapper/HBox.cs: 
	* stetic/wrapper/HButtonBox.cs: 
	* stetic/wrapper/HPaned.cs: 
	* stetic/wrapper/Table.cs: 
	* stetic/wrapper/VBox.cs: 
	* stetic/wrapper/VButtonBox.cs: 
	* stetic/wrapper/VPaned.cs: Implement IContainerWrapper, add child
	PropertyGroups

	* stetic/wrapper/Frame.cs: 
	* stetic/wrapper/Window.cs: Implement IContainerWrapper, but
	return an empty ChildPropertyGroups

2005-01-11  Dan Winship  <danw@novell.com>

	* stetic/WidgetBox.cs (WidgetBox, OnRealized): Use WidgetFlags
	property instead of Obsolete Flags.
	(ShowHandles, OnRealized, OnExposeEvent): Set the Background of
	the HandleWindow to black when creating it, rather than filling in
	the foreground in OnExposeEvent.
	(OnSizeAllocated): Don't set HandleAllocation here, since the
	window may not have been realized yet, which would make
	TranslateCoordinates not work.
	(ShapeHandles): Figure out HandleAllocation here.
	
2005-01-07  Dan Winship  <danw@novell.com>

	* stetic/wrapper/Image.cs: wrapper for Gtk.Images that show files

	* stetic/wrapper/Icon.cs: wrapper for Gtk.Images that show stock icons

	* stetic/wrapper/SpinButton.cs: wrapper for Gtk.SpinButton
	
	* stetic/wrapper/Frame.cs: 
	* stetic/wrapper/HBox.cs: 
	* stetic/wrapper/HButtonBox.cs: 
	* stetic/wrapper/HPaned.cs: 
	* stetic/wrapper/VBox.cs: 
	* stetic/wrapper/VButtonBox.cs: 
	* stetic/wrapper/VPaned.cs: 
	* stetic/wrapper/Table.cs: 
	* stetic/wrapper/Window.cs: Implement IObjectWrapper on these
	(previously they just implemented IDesignTimeContainer)

	* stetic/wrapper/Box.cs: 
	* stetic/wrapper/ButtonBox.cs: 
	* stetic/wrapper/Paned.cs: static classes that define
	PropertyDescriptors used by their subclasses

	* stetic/wrapper/DefaultWidgets.cs: Update for new wrappers

	* stetic/editor/File.cs: editor for strings that represent filenames

	* stetic/Stetic.cs: Use Gnome.Program rather than Gtk.Application
	now, since we're using Gnome.FileEntry.

2005-01-06  Dan Winship  <danw@novell.com>

	* stetic/IDesignTimeContainer.cs: New name for the old
	IWidgetSite.

	* stetic/WidgetSite.cs (IWidgetSite): Now a "parent" for
	WidgetSite and WindowSite.
	(WidgetSite): Implement IWidgetSite and IDesignTimeContainer.
	(WindowSite): IWidgetSite implementation for toplevel windows.
	Includes the focus-tracking code formerly in
	Stetic.Wrapper.Window.

	* stetic/ContextMenu.cs (ContextMenu):
	* stetic/Stetic.cs (Select):
	* stetic/PropertyGrid.cs (PropertyGrid.Select,
	ChildPropertyGrid.Select): Change WidgetBox and WidgetSite params
	to IWidgetSite. This lets us select and show properties for toplevels.

	* stetic/WidgetFactory.cs (WindowFactory.OnButtonPressEvent):
	Create a WindowSite for the new window and connect to its
	FocusChanged event.

	* stetic/wrapper/*.cs: s/IWidgetSite/IDesignTimeContainer/

	* stetic/wrapper/Window.cs (OnSetFocus): Gone. Handled by
	WindowSite now.

2005-01-05  Dan Winship  <danw@novell.com>

	* stetic/ContextMenu.cs: Menu subclass to use as a WidgetSite's
	context menu. Currently a clone of Glade's context menu, but with
	no widget-specific content, and it doesn't actually implement Cut,
	Copy, or Paste. (Meaning you can do Select or Delete.)

	* stetic/WidgetSite.cs (OnPopupMenu): create a ContextMenu and pop
	it up.
	(OnButtonPressEvent): Call OnPopupMenu() on a right-click.
	(OnKeyReleaseEvent): hand off Delete key handling to Delete()
	(Delete): new public method to delete the site's child.

	* stetic/PropertyDescriptor.cs (PropertyDescriptor): fix a bug in
	the sub-property case

2005-01-05  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs (IPropertySensitizer): interface for
	wrapper classes that want to be able to tweak the sensitivity of
	their editors.

	* stetic/Notify.cs: static helper class for the GObject "notify"
	signal, which isn't currently bound by glib-sharp.

	* stetic/PropertyDescriptor.cs (EventInfo, ParamSpec, EditorType):
	Make these be properties of the PropertyDescriptor rather than
	being figured out in PropertyEditors.

	* stetic/PropertyEditor.cs: Renamed from PropertyEditors.cs and
	made into an abstract widget class rather than a static class.
	(MakeEditor): Now returns a PropertyEditor rather than just a
	Widget.
	(BasicEditor, RangeEditor, NoEditor): Now subclasses of
	PropertyEditor, and they implement an Update() method to force the
	editor to sync with the underlying property.

	* stetic/PropertyGrid.cs: Tweak for PropertyDescriptor and
	PropertyEditor changes. Use IPropertySensitizer if the displayed
	widget supports it. Use Stetic.Notify to notice when the user
	interacts with the displayed widget (eg, toggling a checkbox) and
	force the relevant property editor to update itself.

	* stetic/ParamSpec.cs (ParamSpecTypeHack): add an unused private
	subclass of GLib.Object so we can access the static protected
	LookupGType method. (This wouldn't be needed if ParamSpec was in
	glib-sharp, because there's an internal method we could use.)
	(LookupObjectProperty, LookupChildProperty): Take a Type rather
	than a GLib.Object, so we can look up a type's properties without
	needing an instatiated object.

	* stetic/wrapper/Button.cs: Make the UI for the "Stock ID" and
	"Label" properties work more nicely by wrapping both of them at
	the Stetic.Wrapper.Button level, and watching for notifications on
	the UseStock property, and setting the wrapper Label to the stock
	item's Label rather than its Name when setting a stock item (eg,
	"_OK" rather than "gtk-ok"). Also add the UseStock property, and
	implement the IPropertySensitizer interface so that only one of
	Stock ID and Label is sensitive at any time.

	* stetic/editor/StockItem.cs: Remove the "None" option; the editor
	should be desensitized if no stock item is being used.

	* glue/notify.c: glue for Stetic.Notify

	* glue/paramspec.c (stetic_param_spec_for_property,
	stetic_param_spec_for_child_property): Take a GType rather than a
	GObject.

2004-12-20  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs: interface for Stetic.Wrapper objects
	to use to allow them to define their properties

	* stetic/PropertyDescriptor.cs: a class describing an editable
	object property

	* stetic/PropertyGrid.cs: Reimplement this using
	PropertyDescriptors and PropertyGroups for the model, and
	Gtk.Expanders for the view.

	* stetic/PropertyEditorAttribute.cs: for Stetic.Editors to use to
	specify the property and/or event to use to interact with them

	* stetic/PropertyEditors.cs: Updated for PropertyDescriptor, the
	Stetic.Editor namespace, etc

	* stetic/ParamSpec.cs: make Minimum, Maximum, Default virtual
	methods on ParamSpec itself, overridden by subclasses.

	* stetic/editor/Boolean.cs: 
	* stetic/editor/Char.cs: 
	* stetic/editor/Enumeration.cs: 
	* stetic/editor/FloatRange.cs: 
	* stetic/editor/IntRange.cs: 
	* stetic/editor/OptIntRange.cs: 
	* stetic/editor/StockItem.cs: 
	* stetic/editor/String.cs: Editors for properties of various types

	* stetic/wrapper/Arrow.cs: 
	* stetic/wrapper/Button.cs: 
	* stetic/wrapper/CheckButton.cs: 
	* stetic/wrapper/ComboBox.cs: 
	* stetic/wrapper/DrawingArea.cs: 
	* stetic/wrapper/Entry.cs: 
	* stetic/wrapper/HScrollbar.cs: 
	* stetic/wrapper/HSeparator.cs: 
	* stetic/wrapper/Label.cs: 
	* stetic/wrapper/RadioButton.cs: 
	* stetic/wrapper/VScrollbar.cs: 
	* stetic/wrapper/VSeparator.cs: IObjectWrapper implementations

	* stetic/wrapper/Misc.cs: 
	* stetic/wrapper/Range.cs: 
	* stetic/wrapper/Widget.cs: static classes defining certain
	PropertyGroups

	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/HPaned.cs:
	* stetic/wrapper/Table.cs:
	* stetic/wrapper/VBox.cs:
	* stetic/wrapper/VPaned.cs:
	* stetic/wrapper/Window.cs: s/Widget/Gtk.Widget/ since there is
	now a Stetic.Wrapper.Widget

	* stetic/wrapper/DefaultWidgets.cs: use the new wrappers

	* stetic/Makefile.am (stetic_exe_SOURCES): update

	* stetic/stetic.in: pass --debug to mono

2004-12-20  Dan Winship  <danw@novell.com>

	* stetic/wrapper: Rename "wrappers" dir to "wrapper", to match the
	namespace

	* stetic/Makefile.am (stetic_exe_SOURCES): update for that

2004-12-15  Dan Winship  <danw@novell.com>

	* stetic/Stetic.cs: 
	* stetic/WidgetSite.cs: 
	* stetic/wrappers/Table.cs: Clean up new mcs warnings

	* stetic/PropertyEditors.cs (Enum): Redo this using ComboBox to
	avoid the warning about OptionMenu being deprecated
	(Flags): Make this a no-op for now. The OptionMenu-based
	implementation wasn't very useful anyway.

2004-12-14  Dan Winship  <danw@novell.com>

	* stetic/*Wrapper.cs: Move these all to stetic/wrappers and rename

	* stetic/DefaultWidgets.cs: Moved out of stetic/WidgetFactory.cs

	* stetic/Makefile.am (stetic_exe_SOURCES): Update

2004-12-13  Dan Winship  <danw@novell.com>

	* stetic/PropertyEditors.cs (Enum, Flags): implement these by
	using private classes rather than anonymous delegates, to work
	around 69614.

	* stetic/TableWrapper.cs: fix a search-and-replace-o ("placesite"
	instead of "placeholder")
	(Sync): Don't adjust expand/fill settings of occupied sites.
	(ChildOccupancyChanged): When a site becomes occupied, reset its
	attach options.

2004-12-10  Dan Winship  <danw@novell.com>

	* stetic/WidgetBox.cs: Always have a GdkWindow, so that the
	background of a container can be clicked on to select it (if any
	background is visible). Fix up coordinate handling accordingly.

	* stetic/WidgetFactory.cs (DefaultWidgets): add VButtonBox and
	HButtonBox.

	* stetic/Makefile.am (stetic_exe_SOURCES): add
	HButtonBoxWrapper.cs, VButtonBoxWrapper.cs
	(stetic.exe): Use -pkg:gtk-sharp-2.0 rather than the output we
	already cached in configure.in, because Miggie says so. :)
	
2004-12-08  Dan Winship  <danw@novell.com>

	* Initial commit

