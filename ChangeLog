2005-02-25  Dan Winship  <danw@novell.com>

	* stetic/Project.cs: implement IStetic

	* stetic/GladeImport.cs: pass the Project down into CreateWidget
	and AddChildren so they can eventually pass it to
	ObjectWrapper.Create as an IStetic. One more FIXME down.

	* stetic/Palette.cs: take a Project at construct time and pass it
	on to WidgetFactories

	* stetic/WidgetFactory.cs: take a Project at construct time and
	pass that to new wrappers rather than implementing IStetic here.

	* stetic/Stetic.cs: pass Project to the Palette

	* libstetic/ObjectWrapper.cs (Create): swap the order of the
	arguments

	* libstetic/wrapper/Container.cs (ChildWrapper): update for
	ObjectWrapper.Create change

2005-02-24  Dan Winship  <danw@novell.com>

	* libstetic/ObjectWrapper.cs: remove the protected (IStetic,
	object) constructor and replace it with a virtual Wrap method.
	(Register): new method to register a wrapper type
	(Create): new method to create a wrapper of a given type (with
	either a provided widget or a fresh one).
	(AddItemGroup): replaces RegisterWrapper. Adds a single ItemGroup
	to the type.
	(AddContextMenuItems): replaces RegisterContextMenu

	* libstetic/ObjectWrapperAttribute.cs: remove the WrappedType
	again; it's now a static property on the wrapper.

	* libstetic/ItemGroup.cs (ItemGroup): fix this to not lose if
	passed a wrapperType and a dotted property

	* libstetic/wrapper/*.cs: update for the NWO:
		* ObjectWrapperAttribute only takes 3 args again
		* Add static WrappedType property to all wrappers
		* Add static CreateInstance method to all wrappers that
		  need to do more than just "new Gtk.Foo ()"
		* Replace static ctor with static Register method
		  using AddItemGroup/AddContextMenuItems
		* Replace instance ctors with a Wrap override

	* stetic/GladeImport.cs: 
	* stetic/Palette.cs: 
	* stetic/PropertyGrid.cs: 
	* stetic/WidgetFactory.cs: Update to match ObjectWrapper changes

2005-02-24  Dan Winship  <danw@novell.com>

	* libstetic/wrapper/Dialog.cs: 
	* libstetic/wrapper/Window.cs (Modal): wrap this and don't set the
	underlying window property

	* libstetic/wrapper/Widget.cs (Visible): wrap this property and
	don't set the underlying widget property for Window subclasses.

	* stetic/GladeImport.cs (Load): set doc.PreserveWhitespace so that
	things like '<property name="label">    </property>' (which is
	used to indent HIG-style frames) import correctly. Don't crash if
	CreateWidget returns null.
	(CreateWidget): Add some debug messages, prevent a g_warning if
	the glade file uses types we don't wrap.
	(AddChildren): Add a hack to make "Help" buttons be packed with
	the "secondary" property in ButtonBoxes, the same as glade does.
	(HydrateProperties): Don't need to filter out Window.Visible any
	more.

2005-02-22  Dan Winship  <danw@novell.com>

	* stetic/PropertyGrid.cs: Kill ChildPropertyGrid and make the
	child properties appear as just another property group in the main
	Properties window.

	* stetic/Stetic.cs (Main): clean this up a little, and reorganize
	(palette on the left, project + properties on the right). Also
	update for PropertyGrid changes.

	* stetic/Palette.cs: fix up code style, make "Widgets" appear
	before "Containers", remove some commented out code

2005-02-22  Everaldo Canuto  <everaldo_canuto@yahoo.com.br>

	* stetic/Palette.cs: New palette GUI.

2005-02-22  Todd Berman  <tberman@off.net>

	* libstetic/wrapper/Button.cs:
	* libstetic/wrapper/ToggleButton.cs:
	* libstetic/wrapper/VScale.cs:
	* libstetic/wrapper/Label.cs:
	* libstetic/wrapper/TextView.cs:
	* libstetic/wrapper/Container.cs:
	* libstetic/wrapper/Widget.cs:
	* libstetic/wrapper/VSeparator.cs:
	* libstetic/wrapper/Paned.cs:
	* libstetic/wrapper/Icon.cs:
	* libstetic/wrapper/Box.cs:
	* libstetic/wrapper/ProgressBar.cs:
	* libstetic/wrapper/RadioButton.cs:
	* libstetic/wrapper/ComboBoxEntry.cs:
	* libstetic/wrapper/EventBox.cs:
	* libstetic/wrapper/Frame.cs:
	* libstetic/wrapper/HPaned.cs:
	* libstetic/wrapper/ScrolledWindow.cs:
	* libstetic/wrapper/HBox.cs:
	* libstetic/wrapper/SpinButton.cs:
	* libstetic/wrapper/Window.cs:
	* libstetic/wrapper/ComboBox.cs:
	* libstetic/wrapper/ColorButton.cs:
	* libstetic/wrapper/VPaned.cs:
	* libstetic/wrapper/Alignment.cs:
	* libstetic/wrapper/VBox.cs:
	* libstetic/wrapper/Notebook.cs:
	* libstetic/wrapper/Image.cs:
	* libstetic/wrapper/ButtonBox.cs:
	* libstetic/wrapper/DrawingArea.cs:
	* libstetic/wrapper/Scale.cs:
	* libstetic/wrapper/Table.cs:
	* libstetic/wrapper/Arrow.cs:
	* libstetic/wrapper/TreeView.cs:
	* libstetic/wrapper/Misc.cs:
	* libstetic/wrapper/HScrollbar.cs:
	* libstetic/wrapper/HButtonBox.cs:
	* libstetic/wrapper/Range.cs:
	* libstetic/wrapper/HScale.cs:
	* libstetic/wrapper/Dialog.cs:
	* libstetic/wrapper/Entry.cs:
	* libstetic/wrapper/FontButton.cs:
	* libstetic/wrapper/MessageDialog.cs:
	* libstetic/wrapper/Expander.cs:
	* libstetic/wrapper/HSeparator.cs:
	* libstetic/wrapper/Bin.cs:
	* libstetic/wrapper/Statusbar.cs:
	* libstetic/wrapper/Calendar.cs:
	* libstetic/wrapper/CheckButton.cs:
	* libstetic/wrapper/VScrollbar.cs:
	* libstetic/wrapper/VButtonBox.cs:

	Move to a 3 param'd ctor, to provide initialized information
	Add a Site property in Bin.
	Add a 4th parameter to the ObjectWrapperAttributes to show which
	gtk# type is wrapped.
	Dummy TreeView wrapper.
	
	* libstetic/ObjectWrapperAttribute.cs: New parameter to show which
	gtk# type is wrapped.

	* libstetic/Makefile.am: Add wrapper/TreeView.cs

	* libstetic/ObjectWrapper.cs: Add LookupWrappedTypes, to return a
	Type[] of the Stetic.Wrapper.* classes that wrap a given gtk# type.

	* TODO: Update.

	* stetic/WidgetFactory.cs: Make sure to hit wrappedObject.GType so
	that GObject stuff is properly initialized.

	* stetic/Stetic.cs: Change the GUI around a bit.

	* stetic/Palette.cs: New palette GUI.

	* stetic/Makefile.am: Add GladeImport.cs.

	* stetic/Project.cs: Add Project.Clear ();

	* stetic/GladeImport.cs: New file, used to provide glade file
	importation.

	* glue/Makefile.am: Add value.c
	* glue/value.c: New glue file to help with interacting with GValues,
	and used in the GladeImport process.

2005-02-22  Dan Winship  <danw@novell.com>

	* TODO: New

2005-02-22  Everaldo Canuto  <everaldo_canuto@yahoo.com.br>

	* libstetic/wrapper/pixmaps/alignment.png: new icon converted fron xpm.
	* libstetic/wrapper/pixmaps/eventbox.png: new icon converted fron xpm.
	* libstetic/wrapper/pixmaps/progressbar.png: new icon converted fron xpm.
	* libstetic/wrapper/pixmaps/statusbar.png: new icon converted fron xpm.

2005-02-19  Dan Winship  <danw@novell.com>

	* libstetic/WidgetBox.cs (PopupContextMenu): new event to mean
	"pop up a context menu for some reason", which could be because of
	a keypress or button press in either the widgetbox itself or its
	child.
	(InterceptButtonPress, OnButtonPressEvent): Handle this stuff here
	rather than passing it off to WidgetSite.

	* stetic/WidgetSite.cs:
	* libstetic/WidgetSite.cs: move stetic/WidgetSite.cs to libstetic,
	minus the very very small amount that depended on other things in
	stetic/.

	* libstetic/WindowSite.cs: split this out of WidgetSite.cs

	* stetic/WidgetFactory.cs (CreateWidgetSite): connect to the
	site's PopupContextMenu event.

2005-02-18  Dan Winship  <danw@novell.com>

	* libstetic/TranslatableAttribute.cs: new attribute to mark a
	string property of an attribute as being translatable.

	* libstetic/ObjectWrapperAttribute.cs (Name): add
	TranslatableAttribute to this property

	* libstetic/CommandAttribute.cs: add a Description field, and mark
	the Label and Description as Translatable.

	* libstetic/CommandDescriptor.cs: extract description from
	CommandAttribute and make it available via the Description field

	* libstetic/DescriptionAttribute.cs: new attribute to give a
	translatable label and description for a property.

	* libstetic/PropertyDescriptor.cs: extract label and description
	info from ParamSpecs or DescriptionAttributes, and make them
	available via the Label and Description fields

	* libstetic/wrapper/Box.cs: 
	* libstetic/wrapper/Button.cs:
	* libstetic/wrapper/ComboBox.cs: 
	* libstetic/wrapper/Icon.cs: 
	* libstetic/wrapper/MessageDialog.cs: 
	* libstetic/wrapper/Notebook.cs: 
	* libstetic/wrapper/RadioButton.cs: 
	* libstetic/wrapper/Table.cs: 
	* libstetic/wrapper/TextView.cs: add descriptions to commands and
	properties

	* stetic/Grid.cs (AppendPair, Append): add overloads that take a
	"description" arg, and set up tooltips.

	* stetic/PropertyGrid.cs (AppendProperty, AppendCommand): Pass the
	descriptions from the ItemDescriptors to the underlying Grid
	methods

2005-02-17  Dan Winship  <danw@novell.com>

	* libstetic/wrapper/Container.cs (RegisterWrapper): override the
	base RegisterWrapper method and scan the type for a
	Stetic.Wrapper.Container.ContainerChild subclass, and if found,
	remember it as the class's child wrapper class.
	(RegisterChildItems, ChildItemGroups): Gone now
	(ChildWrapper): Creates a child property wrapper for a WidgetSite
	(class ContainerChild): ObjectWrapper implementation for wrapping
	Gtk.Container.ContainerChild
	(CreateWidgetSite): Now an override of Widget's
	(HExpandable, VExpandable): moved to Widget

	* libstetic/wrapper/Widget.cs (CreateWidgetSite, HExpandable,
	VExpandable): moved here from Container, with non-Container base
	implementations.

	* libstetic/wrapper/Table.cs: implement a ContainerChild subclass
	and use it to implement AutoSize again. Also, split XOptions and
	YOptions into multiple bools.

	* libstetic/wrapper/Box.cs: implement a ContainerChild subclass.
	(SiteOccupancyChanged): when adding a new widget, set Expand and
	Fill correctly according to its expandability

	* libstetic/wrapper/ButtonBox.cs:
	* libstetic/wrapper/Notebook.cs:
	* libstetic/wrapper/Paned.cs: implement a ContainerChild subclass.

	* libstetic/wrapper/Bin.cs: 
	* libstetic/wrapper/Dialog.cs: 
	* libstetic/wrapper/ScrolledWindow.cs: 
	* libstetic/wrapper/Window.cs: make Bin better able to deal with
	subclasses that create their own WidgetSites.

	* libstetic/wrapper/Scrollbar.cs: kill this. HScrollbar and
	VScrollbar can inherit directly from Range.

	* libstetic/wrapper/HScale.cs (HExpandable):
	* libstetic/wrapper/HScrollbar.cs (HExpandable):
	* libstetic/wrapper/HSeparator.cs (HExpandable):
	* libstetic/wrapper/VScale.cs (VExpandable):
	* libstetic/wrapper/VScrollbar.cs (VExpandable):
	* libstetic/wrapper/VSeparator.cs (VExpandable): return true

	* libstetic/CommandDescriptor.cs:
	* libstetic/ItemDescriptor.cs:
	* libstetic/PropertyDescriptor.cs: s/object/ObjectWrapper/ in
	several parts of the API now that ContainerChildren have
	ObjectWrappers.

	* stetic/ContextMenu.cs
	* stetic/PropertyGrid.cs: 
	* stetic/PropertyEditor.cs: update for that

	* libstetic/IStetic.cs:
	* libstetic/WidgetSite.cs: remove the 2-arg CreateWidgetSite
	method from IStetic and add an "EmptySize" property to WidgetSite
	instead.

	* stetic/WidgetFactory.cs: 
	* stetic/WidgetSite.cs: update for CreateWidgetSite/EmptySize
	changes

	* libstetic/Set.cs: convenience class used by Table.

2005-02-17  Dan Winship  <danw@novell.com>

	* libstetic/ObjectWrapper.cs (RegisterWrapper): Renamed from
	RegisterItems.

	* libstetic/wrapper/*.cs: update for that

	* stetic/Stetic.cs: Put all of the windows into a single notebook.
	Probably not the best layout, but I'm getting sick of the multiple
	windows...

2005-02-16  Dan Winship  <danw@novell.com>

	* stetic/Grid.cs (Connect): static method to connect multiple
	grids so they have the same column widths.
	(OnSizeRequested, OnSizeAllocated): update for that

	* stetic/Stetic.cs (Main): Connect the Properties and
	ChildProperties grids.

2005-02-15  Dan Winship  <danw@novell.com>

	* libstetic/ObjectWrapper.cs: split out parts of
	libstetic/wrapper/Object.cs into this.
	(RegisterItems, RegisterContextMenu): static methods to register
	property grid and context menu items for a wrapper type.
	(ItemGroups, ContextMenuItems): these can be implemented here now
	rather than needing to be abstract and then reimplemented by each
	class.

	* libstetic/wrapper/Object.cs: simplified since most of it is in
	ObjectWrapper.cs now.

	* libstetic/wrapper/Container.cs: parallel some of the
	ObjectWrapper stuff for child properties

	* libstetic/wrapper/*: update for new (simplified) itemgroup
	handling.

	* stetic/PropertyGrid.cs (Notified): update prototype

2005-02-14  Dan Winship  <danw@novell.com>

	* libstetic/editor/GroupPicker.cs: property editor for a
	user-extensible list of strings

	* libstetic/wrapper/RadioButton.cs: use GroupPicker for the Group,
	and translate that into Gtk's terms.

2005-02-14  Dan Winship  <danw@novell.com>

	* libstetic/wrapper/Widget.cs (Widget): Set the Name property
	(based on the class name and a per-class counter).

	* libstetic/wrapper/Button.cs: 
	* libstetic/wrapper/CheckButton.cs: 
	* libstetic/wrapper/Expander.cs: 
	* libstetic/wrapper/Frame.cs: 
	* libstetic/wrapper/Label.cs: 
	* libstetic/wrapper/RadioButton.cs: 
	* libstetic/wrapper/ToggleButton.cs: 
	* libstetic/wrapper/Window.cs: use the widget name for the default
	label/title

	* libstetic/wrapper/Notebook.cs: Use real
	wrapped-labels-in-WidgetSites for the notebook tabs.

	* stetic/WidgetFactory.cs: remove widget naming stuff from here

	* stetic/Grid.cs (OnSizeRequested, OnSizeAllocated): fix layout of
	misc widgets (ie, command buttons)

2005-02-14  Dan Winship  <danw@novell.com>

	* libstetic/wrapper/Range.cs: 
	* libstetic/wrapper/Scale.cs: proxy notifications from the
	Adjustment so that the PropertyGrid will reflect manual changes to
	the widget's value

2005-02-14  Dan Winship  <danw@novell.com>

	* libstetic/RangeAttribute.cs: new attribute for specifying the
	range of a property.

	* libstetic/EditorAttribute.cs: local replacement for
	System.ComponentModel.EditorAttribute

	* libstetic/PropertyDescriptor.cs: update to look for
	Stetic.EditorAttribute rather than
	System.ComponentModel.EditorAttribute, and handle
	Stetic.RangeAttribute too.
	(PropertyInfo): property to return the underlying PropertyInfo
	(Minimum, Maximum): new, set from RangeAttribute
	(CanRead): Gone. We never really supported write-only properties.

	* stetic/PropertyEditor.cs (MakeEditor): use the
	PropertyDescriptor's Minimum and Maximum if available.
	(BasicEditor.BasicEditor): Use the property's PropertyInfo rather
	than its type as the "special" constructor used for enumerations,
	etc. This will let us have a few more special editor types. Don't
	bother trying to find a ctor that takes an initial value; it's
	easy enough to just set it post-construction.

	* libstetic/editor/Enumeration.cs: Change the Type ctor to take a
	PropertyInfo instead.

	* libstetic/editor/Text.cs: Use a PropertyInfo ctor, and check if
	there's an EditorAttribute with an EditorSize specified, and use
	that to set the textview's size if so.

	* libstetic/editor/Boolean.cs: 
	* libstetic/editor/Char.cs: 
	* libstetic/editor/Color.cs: 
	* libstetic/editor/File.cs: 
	* libstetic/editor/FloatRange.cs: 
	* libstetic/editor/IntRange.cs: 
	* libstetic/editor/OptIntRange.cs: 
	* libstetic/editor/StockItem.cs: 
	* libstetic/editor/String.cs: Remove "initial" arg from ctor.

	* libstetic/wrapper/ComboBox.cs (Items):
	* libstetic/wrapper/Icon.cs (Stock):
	* libstetic/wrapper/Image.cs (File):
	* libstetic/wrapper/TextView.cs (Text): use new EditorAttribute

	* libstetic/wrapper/Button.cs (StockId): use new EditorAttribute.
	Remove unused DefaultValueAttribute.

	* libstetic/wrapper/ColorButton.cs (Alpha): Use RangeAttribute to
	create a new Alpha property that combines the underlying UseAlpha
	and Alpha properties into a single "optional int range".

2005-02-13  Dan Winship  <danw@novell.com>

	* libstetic/CommandDescriptor.cs: like PropertyDescriptor, but
	describes commands implemented by the widget wrapper (which, like
	properties, can become sensitive and insensitive depending on
	other properties)

	* libstetic/CommandAttribute.cs: attribute for marking methods
	that will be referred to via CommandDescriptors

	* libstetic/IContextMenuProvider.cs: Gone, this functionality is
	part of CommandDescriptor now.

	* libstetic/ItemDescriptor.cs: abstract subclass for
	PropertyDescriptor and CommandDescriptor

	* libstetic/PropertyDescriptor.cs: make this a subclass of
	ItemDescriptor

	* libstetic/ItemGroup.cs: formerly PropertyGroup, but now can hold
	any ItemDescriptor.
	
	* libstetic/wrapper/Object.cs: add a ContextMenuItems property,
	empty by default.

	* libstetic/wrapper/*.cs: update for Item changes

	* libstetic/wrapper/Button.cs: implement "Remove Button Contents"
	and "Restore Button Label" as Commands. Add dummy properties
	HasLabel and HasContents for them to depend on.

	* libstetic/wrapper/Box.cs: 
	* libstetic/wrapper/Notebook.cs: 
	* libstetic/wrapper/Table.cs: change IContextMenuItemProvider
	stuff to use the new Command stuff

	* libstetic/wrapper/ComboBox.cs: replace Model property with a
	multi-line-text Items property

	* libstetic/wrapper/ComboBoxEntry.cs: new wrapper

	* libstetic/wrapper/Window.cs: on a DeleteEvent, just hide the window

	* stetic/Grid.cs: Allow adding of arbitrary widgets in addition to
	the property name/editor pairs.

	* stetic/PropertyGrid.cs: Implement CommandDescriptors by adding
	buttons to the Grid.

	* stetic/ContextMenu.cs: update for CommandDescriptor stuff

	* stetic/PropertyEditor.cs (EditorValueChanged, Update): Fix this
	again to avoid updating loops

	* stetic/WidgetSite.cs (WindowSite.Select): Show() the window, in
	case it was hidden

2005-02-13  Dan Winship  <danw@novell.com>

	* libstetic/ParamSpec.cs (gtksharp_get_type_id): Fix the library
	name in the DllImport attribute

2005-02-11  Dan Winship  <danw@novell.com>

	* stetic/Grid.cs: new base class for PropertyGrid. Instead of
	being a VBox of Expanders, its now a subclass of Container which
	lays out its contents by hand; this makes it much easier to make
	everything end up with the size and location we want (particularly
	in the presence of multi-line editors).

	* stetic/PropertyGrid.cs: Update to be a subclass of Grid

	* libstetic/editor/Text.cs: TextView-based multi-line text editor

	* libstetic/wrapper/TextView.cs: mark the "Text" property as
	wanting the "Text" editor type. Proxy the TextView's Buffer's
	"Changed" event so that the property editor will track typing in
	the widget.

	* stetic/WidgetSite.cs (OnMotionNotifyEvent): force the dragWindow
	to be at least 20x20, so that widgets that make very small
	requests expecting to be allocated much more space (eg, TextView)
	aren't invisible when dragged.

2005-02-09  Dan Winship  <danw@novell.com>

	* libstetic/editor/Color.cs: add an editor for Gdk.Color-valued
	properties

	* stetic/PropertyEditor.cs: Use it

	* stetic/PropertyGrid.cs: 
	* stetic/Stetic.cs: re-enable child packing property page

2005-02-09  Dan Winship  <danw@novell.com>

	* Major reorg again... Now instead of having the widget wrappers
	be subclasses of the types they wrap, they are a parallel set of
	classes. This lets them share code between each other more easily
	than before. Touches nearly every file. Also, update to use
	GLib.Object.AddNotification rather than our own notify hack.

2005-01-27  Dan Winship  <danw@novell.com>

	* stetic/ProjectView.cs: TreeView subclass for displaying the
	widget tree.

	* stetic/Project.cs: model for ProjectView

	* stetic/Palette.cs (IconForType): Split this code out so the
	Project window can make use of it too.

	* stetic/Stetic.cs (Main): Create a "Project" window. Some day
	there will be windows whose names don't start with "P".

	* stetic/WidgetSite.cs: s/ExpandabilityChanged/ContentsChanged/

	* stetic/WidgetFactory.cs (WidgetFactory, Create): set the widget
	Name property, a la glade
	(WindowFactory.OnButtonPressEvent): call
	SteticMain.Project.AddWindow()

	* libstetic/IContainerWrapper.cs: subclass IWidgetWrapper, not
	IObjectWrapper.
	(ContentsChanged): new event that replaces ExpandabilityChanged

	* libstetic/IWindowWrapper.cs: subclass IContainerWrapper, not
	IObjectWrapper

	* libstetic/SiteContentEnumerator.cs: IEnumerator to enumerate the
	real widget children of a container (rather than its WidgetSites)

	* widgets/*.cs: s/ExpandabilityChanged/ContentsChanged/

	* widgets/Dialog.cs: 
	* widgets/MessageDialog.cs: 
	* widgets/Window.cs: Implement ContentsChanged

	* widgets/Paned.cs (Paned): fix a bug in the shared Paned
	properties

	* widgets/ToggleButton.cs (ToggleButton): Initialize "label"

2005-01-25  Dan Winship  <danw@novell.com>

	* libstetic/IWidgetWrapper.cs: New dummy subclass of
	IObjectWrapper

	* libstetic/WidgetBox.cs: Implement OnSetScrollAdjustments (by
	passing them on to the child). Needed for ScrolledWindow.

	* widgets/Alignment.cs: 
	* widgets/EventBox.cs: 
	* widgets/Expander.cs: 
	* widgets/ScrolledWindow.cs: Wrap these

	* widgets/*.cs: s/IObjectWrapper/IWidgetWrapper/

	* stetic/WidgetSite.cs (ParentSite): Deal with the fact that the
	immediate parent won't be a WidgetSite in a few cases.

	* stetic/Palette.cs (AddWidgets): Look for IWidgetWrapper, not
	IObjectWrapper.

2005-01-20  Dan Winship  <danw@novell.com>

	* libstetic/IWindowWrapper.cs: new (empty) interface

	* libstetic/WidgetWrapperAttribute.cs (WidgetType): gone; we can
	distinguish widget wrappers based on whether they implement
	IWindowWrapper, IContainerWrapper, or just IObjectWrapper.

	* widgets/*.cs: remove WidgetType declarations from containers and
	windows.

	* widgets/Dialog.cs: 
	* widgets/Window.cs: Remove IContainerWrapper junk that wasn't
	being used anyway.

	* widgets/Calendar.cs: 
	* widgets/FontButton.cs: 
	* widgets/MessageDialog.cs: new wrappers

	* widgets/pixmaps/curve.png:
	* widgets/pixmaps/gammacurve.png:
	* widgets/pixmaps/hruler.png:
	* widgets/pixmaps/inputdialog.png:
	* widgets/pixmaps/selector.png:
	* widgets/pixmaps/vruler.png: Kill off some glade icons we won't
	be using

	* stetic/Palette.cs: Update for WidgetType going away, and
	reorganize into two columns

2005-01-20  Dan Winship  <danw@novell.com>

	* Move 90% of the files in the repository somewhere else.

	* libstetic/: classes needed by both Stetic itself and widget
	wrapper implementations

	* libstetic/editor/: moved from stetic/editor

	* widgets/: moved from stetic/wrapper and modified a bit to only
	require libstetic. (In particular, all the wrappers now have
	constructors that take an IStetic object which can be used to
	create new WidgetSites)

	* widgets/pixmaps: moved from pixmaps/

	* stetic/: now just the app itself, which links to libstetic and
	dynamically loads libsteticwidgets.
	
2005-01-20  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs (PropertyGroup): Make this take a
	varargs list of property names and build the PropertyDescriptors
	itself, to cut down on the amount of work the wrappers need to do.
	Also add an indexer to retrieve a PropertyDescriptor by name.
	(IPropertySensitizer): Gone

	* stetic/PropertyDescriptor.cs: Update the ctor for how
	PropertyGroup uses it now.
	(DependsOn, DependsInverselyOn, Dependencies,
	InverseDependencies): stuff to specify/probe inter-property
	dependencies, to replace the old IPropertySensitizer stuff more
	simply.

	* stetic/PropertyGrid.cs: Replace IPropertySensitizer stuff with
	PropertyDescriptor.Dependencies, etc

	* stetic/Palette.cs (AddWidgets): Catch exceptions from the
	Gdk.Pixbuf ctor and use the "broken image" image instead if it
	can't load the wrapper's specified image.

	* stetic/wrapper/*.cs: Update for new, simpler PropertyGroup
	creation and inter-property sensitivity settings.

	* stetic/wrapper/ColorButton.cs: 
	* stetic/wrapper/HScale.cs: 
	* stetic/wrapper/ProgressBar.cs: 
	* stetic/wrapper/Scale.cs: 
	* stetic/wrapper/Statusbar.cs: 
	* stetic/wrapper/VScale.cs: New wrappers

	* pixmaps/missing.png: "missing image" pixmap to use for now for
	widgets I don't have an icon for.

2005-01-14  Dan Winship  <danw@novell.com>

	* stetic/PropertyEditor.cs (BasicEditor.EditorValueChanged,
	BasicEditor.Update, RangeEditor.EditorValueChanged,
	RangeEditor.Update): Ignore EditorValueChanged if we're inside an
	Update, since it's just reflecting the change we're already
	making. Indirectly fixes a problem with deleting characters in an
	Entry.

	* stetic/wrapper/Arrow.cs: Add Misc.MiscProperties

	* stetic/wrapper/Button.cs: Implement IContextMenuProvider.
	(ContextMenuItems): Return a context menu with "Remove Button
	Contents" and "Restore Button Label" items, properly sensitized.
	(RemoveContents, RestoreLabel): Implement those.
	(InsensitiveProperties): Update to deal with RemoveContents

	* stetic/wrapper/CheckButton.cs: 
	* stetic/wrapper/RadioButton.cs: Add missing "Label" property plus
	Button.ButtonExtraProperties

	* stetic/editor/Enumeration.cs: Don't show the enumeration values
	in the menu.

	* stetic/editor/FloatRange.cs: Show 2 decimal digits

2005-01-14  Dan Winship  <danw@novell.com>

	* stetic/WidgetBox.cs: Remove InterceptEvents property and
	EventWindow. Instead, ConnectBefore to the child's
	ButtonPressEvent. (This should help to deal with
	non-container-like containers. Eg, GtkButton if you replace the
	label widget with something else.)
	(OnChildButtonPress): called when a button press is intercepted on
	the child widget

	* stetic/WidgetSite.cs: Update for WidgetBox changes.
	(OnChildButtonPress): Handle context menu or focus grabbing as
	needed
	(StartDrag): Change this to take an EventMotion arg. Return false
	if the event window isn't the WidgetBox's HandleWindow. (ie, don't
	allow drags from the widget itself any more, only from its
	handles).
	
	* stetic/WidgetFactory.cs (StartDrag): add evt arg

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/ContextMenu.cs (ContextMenuItem): add an "Enabled" field
	and a ctor to set it
	(ContextMenu): obey the "Enabled" field on IContextMenuProvider
	items
	(IContextMenuProvider): Turn ContextMenuItems from a property to a
	procedure, so we can pass the context item to it

	* stetic/wrapper/Notebook.cs: update for IContextMenuProvider
	change. Disable items (eg, "Go To Previous Page") as appropriate.

	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/VBox.cs:
	* stetic/wrapper/Table.cs: update for IContextMenuProvider change

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/WidgetSite.cs (EmptySize): new property to set the site's
	size when empty
	(set_Occupancy): Use that rather than hardcoding 10x10
	(WidgetSite): New ctor to set EmptySize

	* stetic/wrapper/Window.cs: Use the new WidgetSite ctor rather
	than overriding OnSizeRequested

	* stetic/wrapper/Dialog.cs: Use the new WidgetSite ctor

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/Stetic.cs: Rename the main class from "Stetic" to
	"SteticMain", to work around really annoying C# semantics

	* stetic/WidgetFactory.cs (WindowFactory.OnButtonPressEvent):
	update for that

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/WidgetFactory.cs (WidgetFactoryAttribute): gone, turned
	into WidgetWrapperAttribute
	(WidgetFactory, WindowFactory): Take a Type directly rather than a
	WidgetFactoryDelegate.

	* stetic/WidgetWrapperAttribute.cs: replaces
	WidgetFactoryAttribute, but basically the same thing

	* stetic/Palette.cs (AddWidgets): Take an Assembly rather than a
	Type, and search for all Types in that Assembly with a
	WidgetWrapperAttribute.

	* stetic/Stetic.cs (Main): Update call to Palette.AddWidgets

	* stetic/wrapper/DefaultWidgets.cs: Gone

	* stetic/wrapper/Dialog.cs: 
	* stetic/wrapper/Notebook.cs: 
	* stetic/wrapper/TextView.cs: 
	* stetic/wrapper/ToggleButton.cs: wrap these

	* stetic/wrapper/*.cs: add WidgetWrapper attributes, make sure
	every class has a no-arg constructor

2005-01-13  Dan Winship  <danw@novell.com>

	* stetic/ContextMenu.cs (IContextMenuProvider): New interface for
	widget wrappers that want to add items to their context menus.
	(ContextMenu): support IContextMenuProvider.

	* stetic/IObjectWrapper.cs (IPropertySensitizer): Make
	InsensitiveProperties a property rather than a method

	* stetic/PropertyDescriptor.cs (PropertyDescriptor): Add a new
	constructor for "proxy" descriptors, which get a ParamSpec from
	the base class, but use the property on the derived class. Also,
	if the passed-in propertyName is invalid, throw an
	ArgumentException with a useful message rather than causing a
	NullArgumentException later.

	* stetic/PropertyGrid.cs (SetupSensitivity): Update for
	InsensitiveProperties change

	* stetic/WidgetSite.cs: Update for ContextMenu ctor change

	* stetic/wrapper/Button.cs: Use a proxy PropertyDescriptor for
	"Label", update InsensitiveProperties.

	* stetic/wrapper/ComboBox.cs: Fix a crasher typo noted by Peter
	Williams.

	* stetic/wrapper/Icon.cs: Use proxy PropertyDescriptors for Stock
	and IconSize.

	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/VBox.cs: Implement IContextMenuProvider, adding
	"Insert Before" and "Insert After" commands.

	* stetic/wrapper/Table.cs: Implement IContextMenuProvider, adding
	"Insert Row/Column Before/After" and "Delete Row/Column". Use
	proxy PropertyDescriptors for NRows and NColumns since the base
	properties won't let you remove non-empty rows/columns. Update
	InsensitiveProperties.

	* stetic/stetic.in: If command-line args are passed, pass them to
	mono (since stetic doesn't take any arguments at the moment, and I
	use mono --trace a lot).

2005-01-12  Dan Winship  <danw@novell.com>

	* stetic/PropertyGrid.cs: Reorganize stuff so that ContainerChild
	classes can override properties and implement IPropertySensitizer
	as well.
	
	* stetic/IDesignTimeContainer.cs:
	* stetic/IObjectWrapper.cs (IContainerWrapper): Move the things
	that used to be in IDesignTimeContainer to IContainerWrapper. Kill
	IDesignTimeContainer.

	* stetic/WidgetSite.cs: Update for that

	* stetic/wrapper/Frame.cs:
	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/HButtonBox.cs:
	* stetic/wrapper/HPaned.cs:
	* stetic/wrapper/VBox.cs:
	* stetic/wrapper/VButtonBox.cs:
	* stetic/wrapper/VPaned.cs:
	* stetic/wrapper/Window.cs: Update

	* stetic/wrapper/Table.cs: Update.
	(TableChild) Subclass Gtk.Table.TableChild with an "AutoSize"
	property saying whether or not to automatically adjust the packing
	of child widgets (defaults to on). Also implement
	IPropertySensitizer.
	(Sync): Update for that.

2005-01-12  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs (IContainerWrapper): new interface a la
	IObjectWrapper, but including child properties as well.

	* stetic/PropertyGrid.cs (ChildPropertyGrid): Use IContainerWrapper

	* stetic/wrapper/Box.cs: 
	* stetic/wrapper/ButtonBox.cs: 
	* stetic/wrapper/Paned.cs: add static child PropertyGroups

	* stetic/wrapper/HBox.cs: 
	* stetic/wrapper/HButtonBox.cs: 
	* stetic/wrapper/HPaned.cs: 
	* stetic/wrapper/Table.cs: 
	* stetic/wrapper/VBox.cs: 
	* stetic/wrapper/VButtonBox.cs: 
	* stetic/wrapper/VPaned.cs: Implement IContainerWrapper, add child
	PropertyGroups

	* stetic/wrapper/Frame.cs: 
	* stetic/wrapper/Window.cs: Implement IContainerWrapper, but
	return an empty ChildPropertyGroups

2005-01-11  Dan Winship  <danw@novell.com>

	* stetic/WidgetBox.cs (WidgetBox, OnRealized): Use WidgetFlags
	property instead of Obsolete Flags.
	(ShowHandles, OnRealized, OnExposeEvent): Set the Background of
	the HandleWindow to black when creating it, rather than filling in
	the foreground in OnExposeEvent.
	(OnSizeAllocated): Don't set HandleAllocation here, since the
	window may not have been realized yet, which would make
	TranslateCoordinates not work.
	(ShapeHandles): Figure out HandleAllocation here.
	
2005-01-07  Dan Winship  <danw@novell.com>

	* stetic/wrapper/Image.cs: wrapper for Gtk.Images that show files

	* stetic/wrapper/Icon.cs: wrapper for Gtk.Images that show stock icons

	* stetic/wrapper/SpinButton.cs: wrapper for Gtk.SpinButton
	
	* stetic/wrapper/Frame.cs: 
	* stetic/wrapper/HBox.cs: 
	* stetic/wrapper/HButtonBox.cs: 
	* stetic/wrapper/HPaned.cs: 
	* stetic/wrapper/VBox.cs: 
	* stetic/wrapper/VButtonBox.cs: 
	* stetic/wrapper/VPaned.cs: 
	* stetic/wrapper/Table.cs: 
	* stetic/wrapper/Window.cs: Implement IObjectWrapper on these
	(previously they just implemented IDesignTimeContainer)

	* stetic/wrapper/Box.cs: 
	* stetic/wrapper/ButtonBox.cs: 
	* stetic/wrapper/Paned.cs: static classes that define
	PropertyDescriptors used by their subclasses

	* stetic/wrapper/DefaultWidgets.cs: Update for new wrappers

	* stetic/editor/File.cs: editor for strings that represent filenames

	* stetic/Stetic.cs: Use Gnome.Program rather than Gtk.Application
	now, since we're using Gnome.FileEntry.

2005-01-06  Dan Winship  <danw@novell.com>

	* stetic/IDesignTimeContainer.cs: New name for the old
	IWidgetSite.

	* stetic/WidgetSite.cs (IWidgetSite): Now a "parent" for
	WidgetSite and WindowSite.
	(WidgetSite): Implement IWidgetSite and IDesignTimeContainer.
	(WindowSite): IWidgetSite implementation for toplevel windows.
	Includes the focus-tracking code formerly in
	Stetic.Wrapper.Window.

	* stetic/ContextMenu.cs (ContextMenu):
	* stetic/Stetic.cs (Select):
	* stetic/PropertyGrid.cs (PropertyGrid.Select,
	ChildPropertyGrid.Select): Change WidgetBox and WidgetSite params
	to IWidgetSite. This lets us select and show properties for toplevels.

	* stetic/WidgetFactory.cs (WindowFactory.OnButtonPressEvent):
	Create a WindowSite for the new window and connect to its
	FocusChanged event.

	* stetic/wrapper/*.cs: s/IWidgetSite/IDesignTimeContainer/

	* stetic/wrapper/Window.cs (OnSetFocus): Gone. Handled by
	WindowSite now.

2005-01-05  Dan Winship  <danw@novell.com>

	* stetic/ContextMenu.cs: Menu subclass to use as a WidgetSite's
	context menu. Currently a clone of Glade's context menu, but with
	no widget-specific content, and it doesn't actually implement Cut,
	Copy, or Paste. (Meaning you can do Select or Delete.)

	* stetic/WidgetSite.cs (OnPopupMenu): create a ContextMenu and pop
	it up.
	(OnButtonPressEvent): Call OnPopupMenu() on a right-click.
	(OnKeyReleaseEvent): hand off Delete key handling to Delete()
	(Delete): new public method to delete the site's child.

	* stetic/PropertyDescriptor.cs (PropertyDescriptor): fix a bug in
	the sub-property case

2005-01-05  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs (IPropertySensitizer): interface for
	wrapper classes that want to be able to tweak the sensitivity of
	their editors.

	* stetic/Notify.cs: static helper class for the GObject "notify"
	signal, which isn't currently bound by glib-sharp.

	* stetic/PropertyDescriptor.cs (EventInfo, ParamSpec, EditorType):
	Make these be properties of the PropertyDescriptor rather than
	being figured out in PropertyEditors.

	* stetic/PropertyEditor.cs: Renamed from PropertyEditors.cs and
	made into an abstract widget class rather than a static class.
	(MakeEditor): Now returns a PropertyEditor rather than just a
	Widget.
	(BasicEditor, RangeEditor, NoEditor): Now subclasses of
	PropertyEditor, and they implement an Update() method to force the
	editor to sync with the underlying property.

	* stetic/PropertyGrid.cs: Tweak for PropertyDescriptor and
	PropertyEditor changes. Use IPropertySensitizer if the displayed
	widget supports it. Use Stetic.Notify to notice when the user
	interacts with the displayed widget (eg, toggling a checkbox) and
	force the relevant property editor to update itself.

	* stetic/ParamSpec.cs (ParamSpecTypeHack): add an unused private
	subclass of GLib.Object so we can access the static protected
	LookupGType method. (This wouldn't be needed if ParamSpec was in
	glib-sharp, because there's an internal method we could use.)
	(LookupObjectProperty, LookupChildProperty): Take a Type rather
	than a GLib.Object, so we can look up a type's properties without
	needing an instatiated object.

	* stetic/wrapper/Button.cs: Make the UI for the "Stock ID" and
	"Label" properties work more nicely by wrapping both of them at
	the Stetic.Wrapper.Button level, and watching for notifications on
	the UseStock property, and setting the wrapper Label to the stock
	item's Label rather than its Name when setting a stock item (eg,
	"_OK" rather than "gtk-ok"). Also add the UseStock property, and
	implement the IPropertySensitizer interface so that only one of
	Stock ID and Label is sensitive at any time.

	* stetic/editor/StockItem.cs: Remove the "None" option; the editor
	should be desensitized if no stock item is being used.

	* glue/notify.c: glue for Stetic.Notify

	* glue/paramspec.c (stetic_param_spec_for_property,
	stetic_param_spec_for_child_property): Take a GType rather than a
	GObject.

2004-12-20  Dan Winship  <danw@novell.com>

	* stetic/IObjectWrapper.cs: interface for Stetic.Wrapper objects
	to use to allow them to define their properties

	* stetic/PropertyDescriptor.cs: a class describing an editable
	object property

	* stetic/PropertyGrid.cs: Reimplement this using
	PropertyDescriptors and PropertyGroups for the model, and
	Gtk.Expanders for the view.

	* stetic/PropertyEditorAttribute.cs: for Stetic.Editors to use to
	specify the property and/or event to use to interact with them

	* stetic/PropertyEditors.cs: Updated for PropertyDescriptor, the
	Stetic.Editor namespace, etc

	* stetic/ParamSpec.cs: make Minimum, Maximum, Default virtual
	methods on ParamSpec itself, overridden by subclasses.

	* stetic/editor/Boolean.cs: 
	* stetic/editor/Char.cs: 
	* stetic/editor/Enumeration.cs: 
	* stetic/editor/FloatRange.cs: 
	* stetic/editor/IntRange.cs: 
	* stetic/editor/OptIntRange.cs: 
	* stetic/editor/StockItem.cs: 
	* stetic/editor/String.cs: Editors for properties of various types

	* stetic/wrapper/Arrow.cs: 
	* stetic/wrapper/Button.cs: 
	* stetic/wrapper/CheckButton.cs: 
	* stetic/wrapper/ComboBox.cs: 
	* stetic/wrapper/DrawingArea.cs: 
	* stetic/wrapper/Entry.cs: 
	* stetic/wrapper/HScrollbar.cs: 
	* stetic/wrapper/HSeparator.cs: 
	* stetic/wrapper/Label.cs: 
	* stetic/wrapper/RadioButton.cs: 
	* stetic/wrapper/VScrollbar.cs: 
	* stetic/wrapper/VSeparator.cs: IObjectWrapper implementations

	* stetic/wrapper/Misc.cs: 
	* stetic/wrapper/Range.cs: 
	* stetic/wrapper/Widget.cs: static classes defining certain
	PropertyGroups

	* stetic/wrapper/HBox.cs:
	* stetic/wrapper/HPaned.cs:
	* stetic/wrapper/Table.cs:
	* stetic/wrapper/VBox.cs:
	* stetic/wrapper/VPaned.cs:
	* stetic/wrapper/Window.cs: s/Widget/Gtk.Widget/ since there is
	now a Stetic.Wrapper.Widget

	* stetic/wrapper/DefaultWidgets.cs: use the new wrappers

	* stetic/Makefile.am (stetic_exe_SOURCES): update

	* stetic/stetic.in: pass --debug to mono

2004-12-20  Dan Winship  <danw@novell.com>

	* stetic/wrapper: Rename "wrappers" dir to "wrapper", to match the
	namespace

	* stetic/Makefile.am (stetic_exe_SOURCES): update for that

2004-12-15  Dan Winship  <danw@novell.com>

	* stetic/Stetic.cs: 
	* stetic/WidgetSite.cs: 
	* stetic/wrappers/Table.cs: Clean up new mcs warnings

	* stetic/PropertyEditors.cs (Enum): Redo this using ComboBox to
	avoid the warning about OptionMenu being deprecated
	(Flags): Make this a no-op for now. The OptionMenu-based
	implementation wasn't very useful anyway.

2004-12-14  Dan Winship  <danw@novell.com>

	* stetic/*Wrapper.cs: Move these all to stetic/wrappers and rename

	* stetic/DefaultWidgets.cs: Moved out of stetic/WidgetFactory.cs

	* stetic/Makefile.am (stetic_exe_SOURCES): Update

2004-12-13  Dan Winship  <danw@novell.com>

	* stetic/PropertyEditors.cs (Enum, Flags): implement these by
	using private classes rather than anonymous delegates, to work
	around 69614.

	* stetic/TableWrapper.cs: fix a search-and-replace-o ("placesite"
	instead of "placeholder")
	(Sync): Don't adjust expand/fill settings of occupied sites.
	(ChildOccupancyChanged): When a site becomes occupied, reset its
	attach options.

2004-12-10  Dan Winship  <danw@novell.com>

	* stetic/WidgetBox.cs: Always have a GdkWindow, so that the
	background of a container can be clicked on to select it (if any
	background is visible). Fix up coordinate handling accordingly.

	* stetic/WidgetFactory.cs (DefaultWidgets): add VButtonBox and
	HButtonBox.

	* stetic/Makefile.am (stetic_exe_SOURCES): add
	HButtonBoxWrapper.cs, VButtonBoxWrapper.cs
	(stetic.exe): Use -pkg:gtk-sharp-2.0 rather than the output we
	already cached in configure.in, because Miggie says so. :)
	
2004-12-08  Dan Winship  <danw@novell.com>

	* Initial commit

